name: Auto Merge

on:
  pull_request:
    types: [opened, synchronize, reopened]
  check_suite:
    types: [completed]
  status: {}

permissions:
  contents: write
  pull-requests: write
  checks: read

jobs:
  auto-merge:
    name: Auto Merge Dependency Updates
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' && 
      contains(github.event.pull_request.labels.*.name, 'auto-merge') &&
      contains(github.event.pull_request.labels.*.name, 'dependencies')
    steps:
      - name: Check if PR is ready for merge
        id: check-pr
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            // Check if PR is from dependency update workflow
            const isDependencyPR = pr.head.ref.includes('update-') && pr.head.ref.includes('-deps');

            // Check if all checks are passing
            const { data: checks } = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: pr.head.sha
            });

            const allChecksPassed = checks.check_runs.every(check => 
              check.status === 'completed' && check.conclusion === 'success'
            );

            // Check if PR is approved or if it's a dependency update (auto-approve)
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            const isApproved = reviews.some(review => review.state === 'APPROVED');

            console.log('PR Info:', {
              isDependencyPR,
              allChecksPassed,
              isApproved,
              mergeable: pr.mergeable,
              draft: pr.draft
            });

            return {
              shouldMerge: isDependencyPR && allChecksPassed && !pr.draft && pr.mergeable,
              needsApproval: !isApproved && isDependencyPR
            };

      - name: Auto-approve dependency PR
        if: fromJson(steps.check-pr.outputs.result).needsApproval
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              event: 'APPROVE',
              body: 'Auto-approving dependency update PR after successful CI checks.'
            });

      - name: Enable auto-merge
        if: fromJson(steps.check-pr.outputs.result).shouldMerge
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              commit_title: `Auto-merge: ${context.payload.pull_request.title}`,
              commit_message: 'Automatically merged dependency update after successful CI checks.',
              merge_method: 'squash'
            });

  auto-merge-on-check-success:
    name: Auto Merge on Check Success
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'check_suite' && 
      github.event.check_suite.conclusion == 'success'
    steps:
      - name: Find and merge eligible PRs
        uses: actions/github-script@v7
        with:
          script: |
            // Find PRs that match the check suite head SHA
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });

            for (const pr of prs) {
              if (pr.head.sha === context.payload.check_suite.head_sha) {
                // Check if PR has auto-merge and dependencies labels
                const hasAutoMerge = pr.labels.some(label => label.name === 'auto-merge');
                const hasDependencies = pr.labels.some(label => label.name === 'dependencies');
                
                if (hasAutoMerge && hasDependencies && !pr.draft && pr.mergeable) {
                  console.log(`Auto-merging PR #${pr.number}: ${pr.title}`);
                  
                  try {
                    await github.rest.pulls.merge({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      pull_number: pr.number,
                      commit_title: `Auto-merge: ${pr.title}`,
                      commit_message: 'Automatically merged dependency update after successful CI checks.',
                      merge_method: 'squash'
                    });
                    
                    console.log(`Successfully merged PR #${pr.number}`);
                  } catch (error) {
                    console.error(`Failed to merge PR #${pr.number}:`, error.message);
                  }
                }
              }
            }
